<?php

use Drupal\Component\Utility\Random;

/**
 * Implements hook_form_alter().
 */
function pokeapi_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_pokemon_form' || $form_id === 'node_pokemon_edit_form') {
    $form['#attached']['library'][] = 'pokeapi/pokemon_autocomplete';
  }
}

/**
 * Implements hook_entity_insert().
 */
function pokeapi_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  // Check if the inserted entity is a user.
  if ($entity->getEntityTypeId() == 'user') {
    // Check if the custom field exists.
    if ($entity->hasField('field_friend_code')) {
      // Generate a custom value.
      $random = new Random();
      $custom_value = $random->name(12, TRUE);
      // Set the custom value to the field.
      $entity->set('field_friend_code', $custom_value);
      // Save the user entity with the new value.
      $entity->save();
    }
  }
}

/**
 * Delete all taxonomy terms from a vocabulary
 * @param $vid
 */
function delete_terms_from_vocab($vid) {

  $tids = Drupal::entityQuery('taxonomy_term')
    ->condition('vid', $vid)
    ->accessCheck(false)
    ->execute();

  if (empty($tids)) {
    return;
  }

  $term_storage = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term');
  $entities = $term_storage->loadMultiple($tids);

  $term_storage->delete($entities);
}

/**
 * Implements hook_entity_view().
 */
function pokeapi_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'node') {
    // Perform custom logic for node view.

    if ($entity->hasField('field_photo')) {
      $name = $entity->get('title')->value;
      $image_url = $entity->get('field_photo')->value;
  
      if (empty($image_url)) {
        $results = \Drupal::service('pokeapi.pokemon_service')->getPokemonByName($name);
  
        if ($results) {
          $image_url = $results['sprites']['other']['official-artwork']['front_default'];
          $image = sprintf('<img src="%s" />', $image_url);
          $build['image'] = [
            '#markup' => '<div class="pokemon-image">'.$image.'</div>',
            '#weight' => 100,
          ];
  
          $types = [];
          foreach ($results['types'] as $type) {
            $types[] = ucwords($type['type']['name']);
          }
          $build['type'] = [
            '#markup' => '<div class="pokemon-type"><ul><li>'.implode('</li><li>', $types).'</li></ul></div>',
            '#weight' => 200,
          ];
        }
      }
    }

    $created_timestamp = $entity->get('created')->value;
    $date_created = \Drupal::service('date.formatter')->format($created_timestamp, 'custom', 'd/m/Y');
    $build['date_captured'] = [
      '#markup' => '<div class="pokemon-date-captured">'.$date_created.'</div>',
      '#weight' => 300,
    ];

    if ($entity->hasField('field_location')) {
      $location = $entity->get('field_location')->value;
      $build['location'] = [
        '#markup' => '<div class="pokemon-location">'.$location.'</div>',
        '#weight' => 400,
      ];
    }
  }
}