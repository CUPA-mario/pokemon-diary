<?php

use Drupal\Component\Utility\Random;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_view().
 */
function pokeapi_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'trainer_diary_view') {
    $id = $args[0] ?? '';
    // Check if friend code exists before querying the user id
    try {
      $query = \Drupal::entityQuery('user')
        ->accessCheck(FALSE)
        ->condition('field_friend_code', $id);
      $user_ids = $query->execute();
      // Use the first user ID if found
      $user_id = reset($user_ids);
    } catch (Exception $e) {
      \Drupal::logger('pokeapi')->warning(
        'Warning: This user has an empty field_friend_code. Error message: ' . $e->getMessage());
    }
    // Use current user ID if on page_2 display
    $args[0] = ($display_id == 'page_2') ? \Drupal::currentUser()->id() : ($user_id ?: $id);
    // Load the user based on the adjusted $args[0]
    $user = User::load($args[0]);
    // Set dynamic value for user header based on loaded user
    $options = $view->display_handler->getOption('header');
    if ($options['entity_user']) {
      $options['entity_user']['target'] = $user->uuid();
    }
    $view->display_handler->overrideOption('header', $options);
  }
}

/**
 * Implements hook_form_alter().
 */
function pokeapi_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id === 'node_pokemon_form' || $form_id === 'node_pokemon_edit_form') {
    $form['#attached']['library'][] = 'pokeapi/pokemon_autocomplete';
    $form['#validate'][] = 'pokeapi_form_validate';

    $title = '<h2>Get started with your <br> Pokémon adventure</h2>';
    $desc = '<p>Log each Pokémon you catch with all its details.<br>' .
      'Celebrate every encounter in your personal<br>' .
      'PokéDiary. Dive into the fun and let your journey<br>unfold.</p>';
    $form['field_photo']['#prefix'] = $title . $desc;

    // Check if the form has an actions array with a submit button.
    if (isset($form['actions']['submit']['#value'])) {
      // Change the text of the save button.
      $form['actions']['submit']['#value'] = t('Add entry');
    }
  }
}

/**
 * Custom validation handler for the Pokémon name.
 */
function pokeapi_form_validate($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Get the value from the form.
  $field_value = $form_state->getValue('title')[0]['value'];

  // Define the vocabulary ID.
  $vocabulary_id = 'pokemon';

  // Load terms from the vocabulary.
  $check = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => $vocabulary_id,
    'name' => $field_value,
  ]);

  // Check if the term exists.
  if (empty($check)) {
    $form_state->setErrorByName('title', t('Pokémon Name should be valid.'));
  }
}

/**
 * Implements hook_entity_insert().
 */
function pokeapi_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  // Check if the inserted entity is a user.
  if ($entity->getEntityTypeId() == 'user') {
    // Check if the custom field exists.
    if ($entity->hasField('field_friend_code')) {
      // Generate a custom value.
      $random = new Random();
      $custom_value = $random->name(12, TRUE);
      // Set the custom value to the field.
      $entity->set('field_friend_code', $custom_value);
      // Save the user entity with the new value.
      $entity->save();
    }
  }
}

/**
 * Delete all taxonomy terms from a vocabulary
 * @param $vid
 */
function delete_terms_from_vocab($vid) {

  $tids = Drupal::entityQuery('taxonomy_term')
    ->condition('vid', $vid)
    ->accessCheck(false)
    ->execute();

  if (empty($tids)) {
    return;
  }

  $term_storage = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term');
  $entities = $term_storage->loadMultiple($tids);

  $term_storage->delete($entities);
}

/**
 * Implements hook_entity_view().
 */
function pokeapi_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() === 'node' && $entity->hasField('field_location')) {
    // Perform custom logic for node view.

    if ($entity->hasField('field_photo')) {
      $name = $entity->get('title')->value;
      $image_url = $entity->get('field_photo')->value;

      if (empty($image_url)) {
        $results = \Drupal::service('pokeapi.pokemon_service')->getPokemonByName($name);

        if ($results) {
          $image_url = $results['sprites']['other']['official-artwork']['front_default'];
          $image = sprintf('<img src="%s" />', $image_url);
          $build['image'] = [
            '#markup' => '<div class="pokemon-image">'.$image.'</div>',
            '#weight' => 100,
          ];

          $types = [];
          foreach ($results['types'] as $type) {
            $types[] = ucwords($type['type']['name']);
          }
          $build['type'] = [
            '#markup' => '<div class="pokemon-type"><ul><li>'.implode('</li><li>', $types).'</li></ul></div>',
            '#weight' => 200,
          ];
        }
      }
    }

    $created_timestamp = $entity->get('created')->value;
    $date_created = \Drupal::service('date.formatter')->format($created_timestamp, 'custom', 'd/m/Y');
    $build['date_captured'] = [
      '#markup' => '<div class="pokemon-date-captured">'.$date_created.'</div>',
      '#weight' => 300,
    ];

    if ($entity->hasField('field_location')) {
      $location = $entity->get('field_location')->value;
      $build['location'] = [
        '#markup' => '<div class="pokemon-location">'.$location.'</div>',
        '#weight' => 400,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function pokeapi_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'system_powered_by_block') {
    // Change the powered by text.
    $variables['content']['#markup'] = t('Copyright @year PokeDiary. All rights reserved.', [
      '@year' => date('Y')
      ]);
  }
}
